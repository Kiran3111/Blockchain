// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0;

contract StudentManagement {

    struct Student {
        int stud_id;
        string Name;
        string Department;
    }

    Student[] public Students;

    // Function to add a new student
    function addStudent(int stud_id, string memory Name, string memory Department) public {
        Student memory stud = Student(stud_id, Name, Department);
        Students.push(stud);
    }

    // Function to get a student's name and department by ID
    function getStudent(int stud_id) public view returns (string memory, string memory) {
        for (uint i = 0; i < Students.length; i++) {
            Student memory stud = Students[i];
            if (stud.stud_id == stud_id) {
                return (stud.Name, stud.Department);
            }
        }
        return ("Name Not Found", "Department Not Found");
    }
    function getAllStudents() public view returns (int[] memory, string[] memory, string[] memory) {
        int[] memory studIds = new int[](Students.length);
        string[] memory names = new string[](Students.length);
        string[] memory departments = new string[](Students.length);

        for (uint i = 0; i < Students.length; i++) {
            Student memory stud = Students[i];
            studIds[i] = stud.stud_id;
            names[i] = stud.Name;
            departments[i] = stud.Department;
        }

        return (studIds, names, departments);
    }

    // Receive function to accept Ether (optional)
    receive() external payable {
        // You can add custom logic for receiving Ether here, or leave it empty.
    }
}